{
  // Place your iron-doom workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Window creation": {
    "scope": "rust",
    "prefix": "wndw",
    "body": [
      "use std::time::Duration;",
      "",
      "use anyhow::Result;",
      "use ultraviolet::UVec2;",
      "",
      "pub type UC = $2;",
      "",
      "pub fn $3() -> impl WindowSetup<UC> {",
      "    move |_context: &WindowContext<UC>, _size: UVec2| Ok(Box::new($1 {}))",
      "}",
      "",
      "",
      "pub struct $1 {",
      "}",
      "",
      "impl Window<UC> for $1 {",
      "    fn handle_event(",
      "        &mut self,",
      "        context: &mut WindowContext<UC>,",
      "        event: &SystemEvent,",
      "    ) -> Result<bool> {",
      "        Ok(false)",
      "    }",
      "",
      "    fn think(&mut self, context: &mut WindowContext<UC>, delta: Duration) -> Result<()> {",
      "        Ok(())",
      "    }",
      "",
      "    fn draw(",
      "        &mut self,",
      "        context: &mut WindowContext<UC>,",
      "        texture: &wgpu::Texture,",
      "        _delta: Duration,",
      "    ) -> Result<()> {",
      "        Ok(())",
      "    }",
      "}"
    ]
  }
}
