// Since we don't want to use SDL2 across the board (namely: so we can have viewer/editor on Web),
// we define a subset of system abstractions here.

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum SystemMouseButton {
    Left,
    Middle,
    Right,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct SystemMod {
    pub alt: bool,
    pub ctrl: bool,
    pub shift: bool,
    pub mac_cmd: bool,
    pub command: bool,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum SystemKeycode {
    LShift,
    RShift,
    Underscore,
    Minus,
    Left,
    Up,
    Right,
    Down,
    Escape,
    Tab,
    Backspace,
    Space,
    Return,
    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,
    Kp0,
    Num0,
    Kp1,
    Num1,
    Kp2,
    Num2,
    Kp3,
    Num3,
    Kp4,
    Num4,
    Kp5,
    Num5,
    Kp6,
    Num6,
    Kp7,
    Num7,
    Kp8,
    Num8,
    Kp9,
    Num9,
    Period,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
}

impl SystemKeycode {
    /// For alphanumeric characters (and some things like spaces, underscores),
    /// this will return the character as a string.
    pub fn to_text(&self) -> Option<&'static str> {
        match self {
            SystemKeycode::A => Some("a"),
            SystemKeycode::B => Some("b"),
            SystemKeycode::C => Some("c"),
            SystemKeycode::D => Some("d"),
            SystemKeycode::E => Some("e"),
            SystemKeycode::F => Some("f"),
            SystemKeycode::G => Some("g"),
            SystemKeycode::H => Some("h"),
            SystemKeycode::I => Some("i"),
            SystemKeycode::J => Some("j"),
            SystemKeycode::K => Some("k"),
            SystemKeycode::L => Some("l"),
            SystemKeycode::M => Some("m"),
            SystemKeycode::N => Some("n"),
            SystemKeycode::O => Some("o"),
            SystemKeycode::P => Some("p"),
            SystemKeycode::Q => Some("q"),
            SystemKeycode::R => Some("r"),
            SystemKeycode::S => Some("s"),
            SystemKeycode::T => Some("t"),
            SystemKeycode::U => Some("u"),
            SystemKeycode::V => Some("v"),
            SystemKeycode::W => Some("w"),
            SystemKeycode::X => Some("x"),
            SystemKeycode::Y => Some("y"),
            SystemKeycode::Z => Some("z"),
            SystemKeycode::Space => Some(" "),
            SystemKeycode::Num0 => Some("0"),
            SystemKeycode::Num1 => Some("1"),
            SystemKeycode::Num2 => Some("2"),
            SystemKeycode::Num3 => Some("3"),
            SystemKeycode::Num4 => Some("4"),
            SystemKeycode::Num5 => Some("5"),
            SystemKeycode::Num6 => Some("6"),
            SystemKeycode::Num7 => Some("7"),
            SystemKeycode::Num8 => Some("8"),
            SystemKeycode::Num9 => Some("9"),
            SystemKeycode::Underscore => Some("_"),
            SystemKeycode::Minus => Some("_"),
            SystemKeycode::Period => Some("."),
            _ => None,
        }
    }
}

pub enum SystemEvent {
    KeyDown {
        keycode: SystemKeycode,
        mods: SystemMod,
    },
    KeyUp {
        keycode: SystemKeycode,
        mods: SystemMod,
    },
    MouseMotion {
        x: i32,
        y: i32,
        xrel: i32,
        yrel: i32,
    },
    MouseWheel {
        x: i32,
        y: i32,
    },
    MouseButtonDown {
        mouse_btn: SystemMouseButton,
    },
    MouseButtonUp {
        mouse_btn: SystemMouseButton,
    },
    SizeChanged {
        width: u32,
        height: u32,
    },
}
